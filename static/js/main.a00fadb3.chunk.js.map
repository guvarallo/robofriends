{"version":3,"sources":["actions/apiKeys.js","reducers/reducers.js","store/store.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions/actions.js","index.js"],"names":["module","exports","initialStateSearch","searchfield","initialStateRobots","isPending","robots","error","logger","createLogger","rootReducer","combineReducers","searchRobots","state","action","type","Object","assign","payload","requestRobots","store","createStore","applyMiddleware","thunkMiddleware","Card","firstName","lastName","email","id","className","src","alt","CardList","map","user","i","key","SearchBox","searchChange","placeholder","onChange","Scroll","props","children","ErrorBoundary","hasError","info","this","setState","Component","connect","dispatch","onSearchChange","event","target","value","onRequestRobots","fetch","headers","apiConfig","apiKey","then","response","json","data","catch","filteredRobots","filter","robot","toLowerCase","includes","useEffect","style","textAlign","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a00fadb3.chunk.js","sourcesContent":["module.exports = {\r\n  'apiKey': '5f6df5379ce8bf7e92af7bb5'\r\n}","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from '../constants';\n\nconst initialStateSearch = {\n  searchfield: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchfield: action.payload });\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { searchRobots, requestRobots } from '../reducers/reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Fragment } from 'react';\n\nconst Card = ({ firstName, lastName, email, id }) => {\n  return (\n    <Fragment>\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n        <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"/>\n        <h2>{firstName} {lastName}</h2>\n        <p>{email}</p>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Card;","import React, { Fragment } from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <Fragment>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card \n              key={robots[i].id} \n              id={robots[i].id} \n              firstName={robots[i].firstName}\n              lastName={robots[i].lastName}\n              email={robots[i].email}\n            />\n          );\n        })\n      }\n    </Fragment>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input \n        className='pa3 ba b--green bg-lightest-blue'\n        type='search' \n        placeholder='Search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooooops, that's not good</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions/actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchfield: state.searchRobots.searchfield,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nconst App = (props) => {\n  const { searchfield, onSearchChange, onRequestRobots, robots, isPending } = props;\n  const filteredRobots = robots.filter(robot => {\n    return robot.firstName.toLowerCase().includes(searchfield.toLowerCase());\n  })\n\n  useEffect(() => {\n    onRequestRobots();\n  }, []);\n\n  return isPending ?\n    <h1 style={{ textAlign: \"center\" }}>Loading</h1> :\n    (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} /><br />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from '../constants';\n\nimport apiConfig from './apiKeys';\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://dummyapi.io/data/api/user?limit=30\", {\n    headers: { 'app-id': apiConfig.apiKey }\n  })\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data.data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store/store';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}