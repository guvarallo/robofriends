{"version":3,"sources":["actions/apiKeys.js","serviceWorker.js","reducers/reducers.js","store/store.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions/actions.js","index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialStateSearch","searchfield","initialStateRobots","isPending","robots","logger","createLogger","rootReducer","combineReducers","searchRobots","action","type","Object","assign","payload","requestRobots","store","createStore","applyMiddleware","thunkMiddleware","Card","firstName","lastName","email","id","className","src","alt","CardList","map","user","i","key","SearchBox","searchChange","placeholder","onChange","Scroll","props","children","ErrorBoundary","hasError","info","this","setState","Component","connect","dispatch","onSearchChange","event","target","value","onRequestRobots","fetch","headers","apiConfig","apiKey","response","json","data","filteredRobots","filter","robot","toLowerCase","includes","useEffect","style","textAlign","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ab11a8e1.chunk.js","sourcesContent":["module.exports = {\r\n  'apiKey': '5f6df5379ce8bf7e92af7bb5'\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from '../constants';\n\nconst initialStateSearch = {\n  searchfield: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchfield: action.payload });\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { searchRobots, requestRobots } from '../reducers/reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Fragment } from 'react';\n\nconst Card = ({ firstName, lastName, email, id }) => {\n  return (\n    <Fragment>\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n        <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"/>\n        <h2>{firstName} {lastName}</h2>\n        <p>{email}</p>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Card;","import React, { Fragment } from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <Fragment>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card \n              key={robots[i].id} \n              id={robots[i].id} \n              firstName={robots[i].firstName}\n              lastName={robots[i].lastName}\n              email={robots[i].email}\n            />\n          );\n        })\n      }\n    </Fragment>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input \n        className='pa3 ba b--green bg-lightest-blue'\n        type='search' \n        placeholder='Search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooooops, that's not good</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions/actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchfield: state.searchRobots.searchfield,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nconst App = (props) => {\n  const { searchfield, onSearchChange, onRequestRobots, robots, isPending } = props;\n  const filteredRobots = robots.filter(robot => {\n    return robot.firstName.toLowerCase().includes(searchfield.toLowerCase());\n  })\n\n  useEffect(() => {\n    onRequestRobots();\n    // eslint-disable-next-line\n  }, []);\n\n  return isPending ?\n    <h1 style={{ textAlign: \"center\" }}>Loading</h1> :\n    (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} /><br />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from '../constants';\n\nimport apiConfig from './apiKeys';\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://dummyapi.io/data/api/user?limit=30\", {\n    headers: { 'app-id': apiConfig.apiKey }\n  })\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data.data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nimport { store } from './store/store';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}